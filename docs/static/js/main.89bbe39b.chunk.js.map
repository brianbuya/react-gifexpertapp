{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","console","log","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"iMAMaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAoBA,OACI,sBAAMC,SAdW,SAACC,GAElBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAQlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAvBc,SAACP,GAEvBF,EAAeE,EAAEQ,OAAOF,a,+BCVfG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,kDAEqCC,UAAWH,GAFhD,+DAGAI,MAAQF,GAHR,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MAEXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCAXO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAKlC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCJCO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAEvB,ECHwB,SAAEA,GAG1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAsBA,OAhBAC,qBAAW,WACPxB,EAASC,GACJwB,MAAM,SAAAC,GAGCC,QAAQC,IAAIF,GACZH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAK1B,CAACpB,IAGGqB,EDtB0BO,CAAc5B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAUrB,OARAM,QAAQC,IAAIP,GASR,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDhB,EAArD,OAEEoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,aEtBzBkB,EAAe,WAGxB,MAAoC3C,mBAAS,CAAC,cAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KASA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAIA,6BAEQ6C,EAAWrB,KAAK,SAAAT,GAAQ,OAEpB,aADA,CACC,EAAD,CAEIA,SAAWA,GADLA,Y,MC3BlC+B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.89bbe39b.chunk.js","sourcesContent":["//rafc funcional component\r\n//en caso de no usar ninguna clase usar frament <> <>\r\n// en caso de usar solo un form no es necesario usar fragments para retornar elementos agrupados.\r\nimport React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        //console.log(e.target.value);\r\n        setinputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        //prevenir el refresh del submit\r\n        e.preventDefault();\r\n\r\n        if ( inputValue.trim().length > 2 ) {\r\n            setCategories( cats => [ inputValue, ...cats ] );\r\n            setinputValue('');\r\n\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\n    export const getGifs = async( category ) => {\r\n\r\n        const url = `https://api.giphy.com/v1/gifs/search?&q=${ encodeURI( category ) }&limit=10&api_key=FKyllLYqK3iUQgYcpz4kurSHQQMOad3Q`;\r\n        const resp = await fetch ( url );\r\n        const { data } = await resp.json();\r\n\r\n        const gifs = data.map( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                // signo de pregunta para ver si vienen imagenes, te aseguras\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n\r\n        return gifs;\r\n\r\n    }","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url } ) => {\r\n\r\n    //console.log( id, title, url );\r\n    // className para agregar clases a css\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={ url } alt={ title } />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","// fetch API obtener imagenes\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    console.log(loading);\r\n\r\n/*     const [images, setImages] = useState([]);\r\n\r\n */\r\n    \r\n\r\n    \r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadein\"> { category } </h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n       \r\n            <div className=\"card-grid\">\r\n\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key={ img.id }\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n\r\n            </div> \r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true \r\n    });\r\n\r\n    // los efectos no pueden ser asyn porque esperan algo sincrono\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( imgs => {\r\n               \r\n                    \r\n                    console.log(imgs);\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n\r\n            \r\n            });\r\n    }, [category])\r\n\r\n\r\n    return state; // {data: [], loading: true};\r\n\r\n} ","// rafc crea el componente solo\r\n// map recorre el arreglo\r\n\r\nimport React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n     // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n /*    const handleAdd = () => {\r\n        //setCategories( [...categories, 'HunterXHunter'] );\r\n        setCategories( cats => [ ...cats, 'HunterXHunter' ] );\r\n    } */\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr />\r\n\r\n{/*             <button onClick={ handleAdd }>Agregar</button> */}\r\n\r\n            <ol>\r\n                { \r\n                    categories.map( category => (\r\n                        //<li key={category}> { category } </li>\r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={ category } \r\n                        />  \r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n \n  document.getElementById('root')\n);\n\n// GifExpertApp\n\n"],"sourceRoot":""}